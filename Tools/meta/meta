#!/usr/bin/node
const DEFAULT = {};
DEFAULT.VERSION  = "1.0.5";
DEFAULT.ENCODING = "utf8";


const fs           = require( "fs" );
const ChildProcess = require( "child_process" );
const Readline     = require( "readline" );

const io = require( "./io" );

config = {
	"arch": process.arch,
	"platform": process.platform
};

// Strip out the node variables and join the rest up as a command
config.runtime    = process.argv.shift();
config.scriptPath = process.argv.shift();

while( process.argv.length > 0 ) {
	if( !process.argv[0].startsWith("-") )
		break;

	// Grab the argument key, without the dash
	var flag = process.argv.shift().substring(1);

	// Snip double dash'd arguments down to their key string
	if( flag.startsWith("-") )
		flag = flag.substring(1);

	var value = true;
	if( process.argv.length > 0 )
		value = ( process.argv[0].startsWith("-") ? true : process.argv.shift() );
	config[flag] = value;
}

config.command = {};

const actions = {};

actions.help = ( config ) => {
	console.log( "" );
	console.log( "$> meta [--OPTIONs] [ACTION] ..." );

	console.log( "" );
	console.log( "Individual actions have specific OPTIONS which should normally be specified before the ACTION." );
	console.log( "This is to prevent arguments to 'meta' from interfering with chained binary arguments to ACTIONs." );

	console.log( "" );
	console.log( "Available actions:" );
	for( var action in actions )
		console.log( "   " +action );
};

actions.init = ( config ) => {
	const target = process.argv.shift();
	var metaBlock = {
		"__version__": DEFAULT.VERSION,
		"encoding": DEFAULT.ENCODING
	}

	if( target === undefined ) {
		console.log( "Action 'init' expects a file argument:" );
		console.log( "   $> meta init file_to_initialise.xml" );
		return;
	}

	if( !fs.existsSync( target ) ){
		console.log( `No such file '${target}', STOP.` );
		return;
	}

	const async = require( "async" );

	io._guess(target).read( target, (err, oldMeta, extra) => {
		const terminal = Readline.createInterface( { input: process.stdin, output: process.stdout } );

		console.log( "Press return with a blank answer to accept the defaults:" );
		async.series([
			(callback) => {
				if( oldMeta !== null ) {
					terminal.question( "This file already has a meta header - are you sure you want to continue? [y/N]: ", (answer) => {
						if( answer != 'y' ) {
							console.log( "META", "Abort!" );
							process.exit( 0 );
							return;
						}
						metaBlock = oldMeta;
						callback();
					} );
				} else
					callback();
			},
			(callback) => {
				terminal.question( "Header version compliance (Default: " +metaBlock.__version__+ "): ", (version) => {
					if( version != "" )
						metaBlock.__version__ = version;
					callback();
				});
			},
			(callback) => {
				terminal.question( "File encoding (Default: "+metaBlock.encoding+"): ", (encoding) => {
					if( encoding != "" )
						metaBlock.encoding = encoding;
					callback();
				});
			},
			(callback) => {
				console.log();
				fancyPrint( metaBlock );
				console.log();
				callback();
			},
			(callback) => {
				terminal.question( "Is this correct? [Y/n] ", (confirm) => {
					if( confirm !== "n" )
						writeMeta( target, metaBlock );
					else
						console.log( "Aborted! No data written" );
					callback();
				} )
			}

		], () => { terminal.close(); } );
	});

};

actions.show = ( config ) => {
	const target = process.argv.shift();

	io._guess( target ).read( target, (err, meta, extra) => {
		if( err )
			return console.log( err );

		console.log( JSON.stringify( meta, null, '\t' ) );
	} );
};


function writeMeta( target, meta ) {
	console.log( "META", "Writing out to file..." );
	io._guess( target ).write( target, meta, (err) => {
		if( err !== null )
			return console.log( err );
		console.log( "META", "Done! Bye!" );
	} );
}

function fancyPrint( object, prefix = "meta." ) {
	for( var k in object ) {
		if( typeof object[k] !== "function" ) {
			if( typeof object[k] === "object" || typeof object[k] === "array" ) {
				fancyPrint( object[k], `${prefix}${k}.` );
			}
			else
				console.log( `${prefix}${k} = '${object[k]}'` );
		}
	}
}

if( config.h == true || config.help == true )
	config.action = "help";

if( config.action === undefined ) {
	if( process.argv.length > 0 )
		config.action = process.argv.shift();
	else
		config.action = "help";
}

// Actually run stuff :)
if( actions[config.action] !== undefined && actions[config.action] !== null ) {
	actions[config.action]( config );
}
else
	return console.log( "META", "Sorry, I don't know how to '" +config.action+ "'...?" );




/*if( process.argv.length > 0 ) {
	config.command.target  = process.argv[process.argv.length-1]; // Get a potential file target; ie. last arg
	config.command.args    = process.argv;

	// Check if the target is a valid file, remove if it doesn't exist.
	if( !FS.existsSync( config.command.target ) ) {
		console.log( "META", "Missing or unidentifiable target file?" );
		config.command.target = null;
	}
}
else {
	config.target = null;
	config.args = [];
}

console.log( "META", "Tentative target:", config.command.target );

var child = ChildProcess.spawn( config.command.binary, config.command.args, {stdio: 'inherit'} );

child.on( 'close', (code,signal) => {
	if( code != 0 )
		return console.log( "META", `Process responded with a non-zero return code (returned ${code}) - not saving the command as it appears to have crashed!` );

	console.log( JSON.stringify(config.command) );

});*/
